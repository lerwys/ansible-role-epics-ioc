---
- name: Set IOC directory name
  set_fact:
    repo_clone_path: "{{ item.clone_path | default(epics_ioc_clone_path) }}"

- name: Set IOC boot directory name
  set_fact:
    repo_ioc_boot_dir: "{{ item.epics_ioc_boot_dir | default(epics_ioc_boot_dir) }}"

- name: Set IOC autosave directory name
  set_fact:
    repo_ioc_autosave_dir: "{{ item.epics_manage_autosave_dir | default(epics_ioc_autosave_dir) }}"

- name: Set IOC initial environment variables
  set_fact:
    repo_ioc_env_vars: "{{ repo_ioc_env_vars | default({}) |
        combine(
            item.epics_ioc_env
        | default({}))
    }}"

- name: Set IOC EPICS_CA_ADDR_LIST if requested
  set_fact:
    repo_ioc_env_vars: "{{ repo_ioc_env_vars |
        combine({
            'EPICS_CA_ADDR_LIST': item.epics_ioc_env_epics_ca_addr_list | default(omit)
        })
    }}"

- name: Set IOC EPICS_CA_AUTO_ADDR_LIST if requested
  set_fact:
    repo_ioc_env_vars: "{{ repo_ioc_env_vars |
        combine({
            'EPICS_CA_AUTO_ADDR_LIST': 'YES' if (item.epics_ioc_env_epics_ca_auto_addr_list | bool) else 'NO'
        })
    }}"
  when: item.epics_ioc_env_epics_ca_auto_addr_list is defined and
        (item.epics_ioc_env_epics_ca_auto_addr_list)

- name: Set IOC EPICS_CA_MAX_ARRAY_BYTES if requested
  set_fact:
    repo_ioc_env_vars: "{{ repo_ioc_env_vars |
        combine({
            'EPICS_CA_MAX_ARRAY_BYTES': item.epics_ioc_env_epics_ca_max_array_bytes | default(omit)
        })
    }}"

- name: Set IOC EPICS_IOC_LOG_PORT
  set_fact:
    repo_ioc_env_vars: "{{ repo_ioc_env_vars |
        combine({
            'EPICS_IOC_LOG_PORT': item.epics_ioc_env_epics_ioc_log_port | default(epics_ioc_env_epics_ioc_log_port)
        })
    }}"

- name: Set EPICS_IOC_LOG_INET if requested
  set_fact:
    repo_ioc_env_vars: "{{ repo_ioc_env_vars |
        combine({
            'EPICS_IOC_LOG_INET': item.epics_ioc_env_epics_ioc_log_inet | default(omit)
        })
    }}"

- name: Set IOC EPICS_CA_SEC_FILE if requested
  set_fact:
    repo_ioc_env_vars: "{{ repo_ioc_env_vars |
        combine({
            'EPICS_CA_SEC_FILE': item.epics_ioc_env_epics_ca_sec_file | default(omit)
        })
    }}"

- name: Show IOC environment variables
  debug:
    msg: "IOC environment variables: {{ repo_ioc_env_vars }}"

- name: Check if IOC directory already exists
  stat:
    path: "{{ repo_clone_path }}"
  register: clone_path_stat
  when: (item.install_via_makefile is defined and
        item.install_via_makefile | bool) or
        (item.clone_only is defined and
         item.clone_only | bool)

- name: Ensure IOC directory exists
  file:
    path: "{{ repo_clone_path }}"
    state: directory
    recurse: true
    mode: 0755
  become: true
  become_user: "{{ ansible_ssh_user | default(ansible_env.SUDO_USER, true) | default(ansible_env.USER, true) | default(ansible_user_id) }}"
  when: not clone_path_stat.stat.exists and
        ((item.install_via_makefile is defined and
        item.install_via_makefile | bool) or
        (item.clone_only is defined and
         item.clone_only | bool))

# Try to preserve local modifications with git stash. This is mostly
# so we can modify configuration files and make the git task idempotent
- name: Try to save local modifications if requested
  command: git stash
  args:
    chdir: "{{ repo_clone_path }}/{{ item.repo_name }}"
  changed_when: false
  failed_when: false
  when: item.repo_stash is defined and
        item.repo_stash | bool
  register: repo_stash

# Ansible user variable, ansible_user, ansible_ssh_user, etc is a mess.
# Going to use th approach in https://github.com/geerlingguy/drupal-vm/issues/1302
# to fix that.
- name: "Ensure repository {{ item.repo_name }} is cloned"
  git:
    repo: "{{ item.org_url }}/{{ item.repo_name }}"
    dest: "{{ repo_clone_path }}/{{ item.repo_name }}"
    version: "{{ item.repo_version | default('master') }}"
    accept_hostkey: "{{ item.git_accept_hostkey | default(omit) }}"
    ssh_opts: "{{ item.git_ssh_opts | default(omit) }}"
    force: "{{ item.force_version | default(false) }}"
  register: git_result
  become: true
  become_user: "{{ ansible_ssh_user | default(ansible_env.SUDO_USER, true) | default(ansible_env.USER, true) | default(ansible_user_id) }}"
  when: (item.install_via_makefile is defined and
        item.install_via_makefile | bool) or
        (item.clone_only is defined and
         item.clone_only | bool)

# Try to apply local modifications with git stash. This is mostly
# so we can modify configuration files and make the git task idempotent
- name: Try to apply local modifications if requested
  command: git stash pop
  args:
    chdir: "{{ repo_clone_path }}/{{ item.repo_name }}"
  changed_when: false
  failed_when: false
  when: item.repo_stash is defined and
        item.repo_stash | bool

- name: "Define {{ item.repo_name }} chdir variable"
  set_fact:
    repo_install_chdir: "{{ item.install_chdir | default('') }}"

- name: "Replace RELEASE file with a custom one for {{ item.repo_name }}"
  template:
    src: "RELEASE.j2"
    dest: "{{ repo_clone_path }}/{{ item.repo_name }}/{{ repo_install_chdir }}/configure/{{ item.epics_ioc_release_filename |
           default(epics_ioc_release_filename) }}"
    owner: "{{ item.make_install_as_user | default(ansible_env.USER, true) | default(ansible_user_id) }}"
    group: "{{ item.make_install_as_user | default(ansible_env.USER, true) | default(ansible_user_id) }}"
    force: true
    mode: 0644
  vars:
    __item_epics_ioc_modules: "{{ item.epics_ioc_modules | default(epics_ioc_epics_ioc_modules) }}"
    __item_epics_base_dir: "{{ item.epics_base_dir | default(epics_ioc_epics_base_dir) }}"
  become: true
  when: item.install_via_makefile is defined and
        (item.install_via_makefile | bool) and
        git_result.changed and
        (item.epics_ioc_overwrite_release_file |
            default(epics_ioc_overwrite_release_file) |
            bool)

- name: "Install {{ item.repo_name }} via Makefile"
  make:
    chdir: "{{ repo_clone_path }}/{{ item.repo_name }}/{{ repo_install_chdir }}"
    target: "{{ make_target | default('install') }}"
    params: "{{ item.make_install_opts | default({}) }}"
  become: true
  become_user: "{{ item.make_install_as_user | default(ansible_env.USER, true) | default(ansible_user_id) }}"
  loop: "{{ item.make_install_targets }}"
  loop_control:
    loop_var: make_target
  when: item.install_via_makefile is defined and
        (item.install_via_makefile | bool) and
        git_result.changed

- name: "Manage user for {{ item.repo_name }}"
  user:
    name: "{{ item.epics_ioc_user | default(epics_ioc_user_name) }}"
    home: "/epics/ioc/{{ item.repo_name }}"
    comment: "{{ item.repo_name }} IOC"
    uid: "{{ ((item.epics_ioc_uid is defined) and
            (item.epics_ioc_uid)) | ternary(item.epics_ioc_uid, omit) }}"
    group: "{{ epics_ioc_group_name }}"
  become: true
  when: item.epics_manage_user | default(true) | bool
